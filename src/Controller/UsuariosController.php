<?php
namespace App\Controller;
use App\Controller\AppController;
use Cake\Event\Event;
use Cake\Log\Log;
use Cake\Datasource\ConnectionManager;
use Cake\Network\Email\Email;
use Cake\ORM\TableRegistry;
use Cake\Utility\Text;
use Cake\Auth\DefaultPasswordHasher;



//require_once($_SERVER['DOCUMENT_ROOT'].'/contalapp/vendor/uui.php');

/**
 * Usuarios Controller
 *
 * @property \App\Model\Table\UsuariosTable $Usuarios
 */
class UsuariosController extends AppController
{

        public function beforeFilter(Event $event)
    {

        set_time_limit(300);
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Auth->allow(['login','recuperar','goodtoken','badusers','newpassword','badtoken','godchange']);
    }

    public function recuperar()
    {
        if ($this->request->is(['post'])) {

            $results=null;
            $connection = ConnectionManager::get('default');
            $email_to = $this->request->data['email'];

            $this->loadModel("Usuarios");
            $user = $this->Usuarios->find('all',[
                'conditions'=>['Usuarios.email'=>$email_to],
                'limit'=>1
            ]);
            $row = $user->first();

            if(!empty($row['id'])){

                $uuid = Text::uuid();
                $email = new Email();
                $email->transport('mailjet');

                $results = $connection->execute("INSERT INTO uuid(id,fecha,usuario,token,estado)VALUES(0,now(),'".$email_to."','".$uuid."',1)");
                $path = "localhost"."/"."contalapp/usuarios/newpassword/".$uuid;

                $mm = "<b>¿Restablecer tu contraseña?</b>  <br/><br/> Si solicitaste un restablecimiento de contraseña para ".$email_to.", haz clic en el link que aparece a continuación. Si no solicitaste esto, ignora este correo electrónico.
                    <a href=$path>Restrablecer contraseña</a>";

                try {
                     $res = $email->from([$this->request->data['email'] => "contalapp@contalap.com.py"])
                         ->to([$email_to => 'My Website'])
                         ->emailFormat('html')
                         ->subject('Recuperacion de Contraseña')
                         ->send($mm);

                     if($res){

                         $this->redirect(array(
                                 'controller' => 'usuarios',
                                 'action' => 'goodtoken')
                         );
                     }

                } catch (Exception $e) {

                    echo 'Exception : ',  $e->getMessage(), "\n";

                }


            }else{

                $this->redirect(array(
                        'controller' => 'usuarios',
                        'action' => 'badusers')
                );
            }


        }
    }


    public function goodtoken()
    {

    }

    public function badusers()
    {

    }

    public function badtoken()
    {

    }

    public function godchange()
    {

    }

    public function nodata()
    {

    }

    public function datos()
    {
        $usuario = $this->Usuarios->get($this->Auth->user('id'));


        $this->set('usuario', $usuario);
        $this->set('_serialize', ['usuario']);
    }

    public function newpassword($token = null)
    {
        if($this->request->is('post'))
        {
            $results=null;
            $connection = ConnectionManager::get('default');
            $consulta = $connection->execute("SELECT * FROM uuid WHERE token='".$token."' and estado=1");
            $email = 0;
            if(!empty($consulta)){
                    foreach ($consulta as $value){
                        $email = $value['usuario'];
                    }
            }

            if(!empty($email)){
                $password = $this->request->data['password'];
                $consulta_id = $connection->execute("SELECT * FROM usuarios WHERE email='".$email."'");
                $id = 0;
                if(!empty($consulta_id)){
                    foreach ($consulta_id as $value){
                        $id = $value['id'];
                    }
                }

                $hash = new DefaultPasswordHasher();
                $pass =  $hash->hash($password);
                $modify = $connection->execute("UPDATE usuarios SET password='".$pass."' WHERE id=".$id);
                if($modify){
                    $modify_uuid = $connection->execute("UPDATE uuid SET estado=0 WHERE usuario='".$email."'");
                     if($modify_uuid){
                         $this->redirect(array(
                                 'controller' => 'usuarios',
                                 'action' => 'godchange')
                         );
                     }
                 }

            }else{

                $this->redirect(array(
                        'controller' => 'usuarios',
                        'action' => 'badtoken')
                );

            }


        }

    }
        public  function isAuthorized($user=null)

    {
        if(isset($user['rol']) && $user['rol']==='user')
        {
            if(in_array($this->request->action,['home']))
            {
                return true;
            }
        }
        return parent::isAuthorized();
    }


    public function login()
    {

        if($this->request->is('post'))
        {

          $user  = $this->Auth->identify();

           if($user){

             $this->Auth->setUser($user);
             $this->request->session()->write("aplicacion","RestorApp");
             return $this->redirect($this->Auth->redirectUrl());

           }else{
             $this->Flash->error('Datos incorrectos',['key'=>'auth']);
           }
        }


        if($this->request->session()->read('Auth.User'))
        {
            $this->request->session()->write("aplicacion","RestorApp");
            return $this->redirect($this->Auth->redirectUrl());

        }

    }

   


    public function logout()
    {
        $this->request->session()->write("permisos",0);
        return $this->redirect($this->Auth->logout());
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {

        $id_empresa = $this->request->session()->read('id_empresa');

               $this->paginate = [
                   'contain'=>['Perfil'],
                   'conditions'=>array('and'=>array('Usuarios.estado'=>1)),
                    'order'=>['Usuarios.id DESC'],
                    'limit'=>25];

        $usuarios = $this->paginate($this->Usuarios);
        $this->set(compact('usuarios'));
        $this->set('_serialize', ['usuarios']);
    }

    /**
     * View method
     *
     * @param string|null $id Usuario id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $usuario = $this->Usuarios->get($id, [
            'contain' => []
        ]);

        $this->set('usuario', $usuario);
        $this->set('_serialize', ['usuario']);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {

        $usuario = $this->Usuarios->newEntity();

        if ($this->request->is('post')) {
            $usuario = $this->Usuarios->patchEntity($usuario, $this->request->data);
            if ($this->Usuarios->save($usuario)) {
                $this->Flash->success(__('The usuario has been saved.'));

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The usuario could not be saved. Please, try again.'));
            }

        }

        $perfiles = $this->Usuarios->Perfil->find('list',['keyField' => 'id','valueField' => 'descripcion'])->where(['estado'=>1]);

        $this->set(compact('usuario','perfiles'));
        $this->set('_serialize', ['usuario']);

    }

    /**
     * Edit method
     *
     * @param string|null $id Usuario id.
     * @return \Cake\Network\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $usuario = $this->Usuarios->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $usuario = $this->Usuarios->patchEntity($usuario, $this->request->data);
            if ($this->Usuarios->save($usuario)) {
                $this->Flash->success(__('The usuario has been saved.'));

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The usuario could not be saved. Please, try again.'));
            }
        }
        $perfiles = $this->Usuarios->Perfil->find('list',['keyField' => 'id','valueField' => 'descripcion'])->where(['estado'=>1]);
        
        $this->set(compact('usuario','perfiles'));
        $this->set('_serialize', ['usuario']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Usuario id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $usuario = $this->Usuarios->get($id);
        if ($this->Usuarios->delete($usuario)) {
            $this->Flash->success(__('The usuario has been deleted.'));
        } else {
            $this->Flash->error(__('The usuario could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }






    public function setIdEmpresa($id_empresa = null,$empresa = null)
    {
        $this->request->session()->write('id_empresa', $id_empresa);
        $this->request->session()->write('empresa', $empresa);

        return $this->redirect(array("controller" => "pages",
            "action" => "index"));

    }

/********************************* SERVICES**********************************************/

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function addEntity()
    {

        //$usuario = $this->Usuarios->newEntity();

        if ($this->request->is('post')) {

            try{

                $usuario = $this->Usuarios->newEntity($this->request->data);

                if ($this->Usuarios->save($usuario)) {
                    $mensaje = "ok";
                } else {
                    $mensaje = "error";
                }

            }catch (\PDOException $e)
            {

                $mensaje = "error";
                //$this->Flash->error(__('Error al guardar. vuelva a intentar.').$e);
            }
        }

        $this->set([
            'mensaje' => $mensaje,
            'usuario' => $usuario,
            '_serialize' => ['mensaje', 'usuario']
        ]);
        $this->viewClass = 'Json';
        $this->render();

    }

    /**
     * Edit method
     *
     * @param string|null $id Usuario id.
     * @return \Cake\Network\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function editEntity($id = null)
    {

        $usuario =$this->Usuarios->get($id);

        if ($this->request->is(['patch', 'post', 'put'])) {

            try{

                $usuario = $this->Usuarios->patchEntity($usuario, $this->request->data);
                if ($this->Usuarios->save($usuario)) {
                    $mensaje = "ok.";
                } else {
                    $mensaje = "error";
                }

            }catch (\PDOException $e)
            {

                $mensaje = "error.";
                $this->Flash->error(__('Error al editar. vuelva a intentar.'));
            }


        }

        $this->set([
            'mensaje' => $mensaje,
            'usuario' => $usuario,
            '_serialize' => ['mensaje', 'usuario']
        ]);
        $this->viewClass = 'Json';
        $this->render();
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function getEntity($id = null)
    {

        $usuario = $this->Usuarios->find('all',
            array('conditions'=>array('Usuarios.id'=>$id)));

        $this->set([
             'usuario' => $usuario,
            '_serialize' => ['usuario']
        ]);
        $this->viewClass = 'Json';
        $this->render();

    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function deleteEntity($id = null)
    {
        $message = "";
        try{

            $usuario = TableRegistry::get('Usuarios');
            $query = $usuario->query();
            $query->update()
                ->set(['estado' => false])
                ->where(['id' => $id])
                ->execute();
            if($query){
                $message = "dato borrado correctamente.";
            }else{
                $message = "no se pudo borrar el registro.";
            }

         }catch (\PDOException $e)
        {

            $mensaje = "error al eliminar.";
            $this->Flash->error(__('Error al eliminar. vuelva a intentar.'));
        }

        $this->set([
            'message' => $message,
            '_serialize' => ['message']
        ]);
        $this->viewClass = 'Json';
        $this->render();

    }


    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function getEntityAll()
    {

        $usuarios = $this->Usuarios->find('all',array('conditions'=>array('estado'=>1),'order'=>array("id desc")));

        $this->set([
            'usuarios' => $usuarios,
            '_serialize' => ['usuarios']
        ]);
        $this->viewClass = 'Json';
        $this->render();

    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function getEntityAllByTerm($term = null)
    {

        $results=null;
        $connection = ConnectionManager::get('default');
        $id_empresa = $this->request->session()->read('id_empresa');

        //USUARIOS
        $results = $connection->execute(
            "SELECT b.id as id,b.nombre as nombre,b.email as email 
            FROM usuarios_empresas a, usuarios b 
            WHERE a.id_empresa=".$id_empresa." and a.estado=1 and a.id_usuario=b.id and
            (b.nombre like '%".$term."%' or a.id like '%".$term."%')");

        $resultado_usuario = array();
        foreach ($results as $value){
            $resultado_usuario[] = array("id"=>$value['id'],
                "nombre"=> $value['nombre'],
                "email"=> $value['email']);
        }

        $usuarios = $resultado_usuario;
        $this->set([
            'usuarios' => $usuarios,
            '_serialize' => ['usuarios']
        ]);
        $this->viewClass = 'Json';
        $this->render();

    }

     /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function getEntityUsuarioAllByTerm($term = null)
    {

        $results=null;
        $connection = ConnectionManager::get('default');
        $id_empresa = $this->request->session()->read('id_empresa');

        //USUARIOS
        $results = $connection->execute(
            "SELECT b.id as id,b.nombre as nombre,b.email as email 
            FROM usuarios b 
            WHERE b.estado=1 and 
            (b.nombre like '%".$term."%' or b.id like '%".$term."%')");

        $resultado_usuario = array();
        foreach ($results as $value){
            $resultado_usuario[] = array("id"=>$value['id'],
                "nombre"=> $value['nombre'],
                "email"=> $value['email']);
        }

        $usuarios = $resultado_usuario;
        $this->set([
            'usuarios' => $usuarios,
            '_serialize' => ['usuarios']
        ]);
        $this->viewClass = 'Json';
        $this->render();

    }


    /**
     * limitedSearch method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function limitedSearch()
    {
        if ($this->request->is('ajax')) {

            $valor = $_POST['valor'];

            $resultado = $this->Usuarios->find("all",array("conditions"=>array("nombre LIKE "=>"%$valor%"),"limit"=>50));

            $usuarios = [];

            foreach ($resultado as $value){

                $usuarios[]=[
                    'value'=>$value->id,
                    'label'=>$value->nombre
                ];
            }

            $this->set([
                'usuarios' => $usuarios,
                '_serialize' => ['usuarios']
            ]);
            $this->viewClass = 'Json';
            $this->render();

        }



    }



}
